// example presented in paragraph 7.8 of the manual
// http://manifem.rd.ciencias.ulisboa.pt/manual-manifem.pdf
// a skew flat torus again

#include "maniFEM.h"
using namespace maniFEM;


int main ( )

{	// begin with the usual two-dimensional space
	Manifold RR2 ( tag::Euclid, tag::of_dim, 2 );
	Function xy = RR2.build_coordinate_system ( tag::Lagrange, tag::of_degree, 1 );
	Function x = xy[0], y = xy[1];

	// define two actions on RR2 (translations)
	Function::Action g1 ( tag::transforms, xy, tag::into, (x+1.) && y ),
	                 g2 ( tag::transforms, xy, tag::into, (x+0.5) && (y+1.) );

	// and divide RR2 by the group of translations generated by {g1,g2}
	Manifold torus_manif = RR2.quotient ( g1, g2 );

	Cell A ( tag::vertex );  x(A) = 0. ;  y(A) = 0.;
	Cell B ( tag::vertex );  x(B) = 0.5;  y(B) = 0.;

	Mesh AB ( tag::segment, A.reverse(), B, tag::divided_in, 5 );
	Mesh BA1 ( tag::segment, B.reverse(), A, tag::divided_in, 5, tag::spin, g1 );
	Mesh BA2 ( tag::segment, B.reverse(), A, tag::divided_in, 10, tag::spin, g2 );
	Mesh AB2 ( tag::segment, A.reverse(), B, tag::divided_in, 10, tag::spin, g2 - g1 );

	Mesh sq1 ( tag::rectangle, AB, BA2, BA1.reverse(), AB2.reverse(), tag::spin );
	Mesh sq2 ( tag::rectangle, BA2.reverse(), BA1, AB2, AB.reverse(), tag::spin );
	Mesh torus ( tag::join, sq1, sq2 );

	std::vector < Cell > vec;
	CellIterator it = torus.iterator ( tag::over_cells, tag::of_dim, 2, tag::around, B );
	for ( it.reset(); it.in_range(); it++ )
		vec.push_back ( *it );
	std::vector<Cell>::iterator itv;
	for ( itv = vec.begin(); itv != vec.end(); itv++ )
	{	Cell sq = *itv;  sq.remove_from_mesh ( torus );  }

	// it makes no sense to export 'torus' in msh format
	// we can draw an unfolded mesh
	torus.draw_ps ( "torus.eps", tag::unfold,
	                tag::over_region, -2. < x < 1.7, -0.4 < y < 1.5 );

	std::cout << "produced file torus.eps - please edit before viewing" << std::endl;
}
